{"version":3,"file":"static/js/240.a30c8b7e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/Components/MoviesList/MoviesList.module.scss?e786","webpack://goit-react-hw-05-movies/./src/Components/MoviesList/MovieItem/MovieItem.module.scss?260c","Components/MoviesList/MovieItem/MovieItem.jsx","Components/MoviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/Components/SearchForm/SearchForm.module.scss?49b1","Components/SearchForm/SearchForm.jsx","Pages/Movies/Movies.jsx","Services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__KYq+x\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MovieItem_title__IFsPo\",\"link\":\"MovieItem_link__00Ts8\"};","import scss from './MovieItem.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst MovieItem = ({ movie }) => {\r\n  const { title, id, poster_path } = movie;\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <li>\r\n      <Link\r\n        to={`/movies/${id}`}\r\n        className={scss.link}\r\n        state={{ from: location }}\r\n      >\r\n        <div className={scss.wrapper}>\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/w300${poster_path}`}\r\n            alt=\"poster\"\r\n          />\r\n          <p className={scss.title}>{title}</p>\r\n        </div>\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MovieItem;\r\n\r\n// --------------------------- PropTypes ----------------------\r\n\r\nMovieItem.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    poster_path: PropTypes.string,\r\n  }),\r\n};\r\n","import scss from './MoviesList.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MovieItem from './MovieItem/MovieItem';\r\n\r\nconst MoviesList = ({ movies, query }) => {\r\n  const moviesLength = movies.length;\r\n\r\n  return (\r\n    <>\r\n      {!moviesLength ? (\r\n        <p>\r\n          According to your request <b>{query}</b> nothing was found. Please try\r\n          again.\r\n        </p>\r\n      ) : (\r\n        <ul className={scss.list}>\r\n          {movies.map(movie => (\r\n            <MovieItem key={movie.id} movie={movie} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n\r\n// --------------------------- PropTypes ----------------------\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      poster_path: PropTypes.string,\r\n    })\r\n  ),\r\n  query: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"SearchForm_input__BRtDA\",\"btn\":\"SearchForm_btn__SCKEb\"};","import scss from './SearchForm.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchForm = ({ onSubmit }) => {\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const query = event.target.query.value;\r\n    onSubmit(query.toLowerCase());\r\n\r\n    // event.target.reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"query\"\r\n        autoFocus\r\n        placeholder=\"Search movie\"\r\n        autoComplete=\"off\"\r\n        className={scss.input}\r\n      />\r\n      <button type=\"submit\" className={scss.btn}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n\r\n// --------------------------- PropTypes ----------------------\r\n\r\nSearchForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import MoviesList from 'Components/MoviesList/MoviesList';\r\nimport SearchForm from 'Components/SearchForm/SearchForm';\r\nimport Section from 'Components/Section/Section';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { getMoviesByQuery } from 'Services/movieApi';\r\n\r\nconst Movies = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [moviesArr, setMoviesArr] = useState(null);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const searchParamsQ = searchParams.get('q');\r\n\r\n  const handleSubmit = queryForm => {\r\n    setQuery(queryForm);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (query === '') {\r\n      return;\r\n    }\r\n\r\n    setSearchParams({ q: query });\r\n  }, [query, setSearchParams]);\r\n\r\n  useEffect(() => {\r\n    if (!searchParamsQ) {\r\n      return;\r\n    }\r\n\r\n    getMoviesByQuery(searchParamsQ)\r\n      .then(response => setMoviesArr(response.results))\r\n      .catch(error => console.log(error));\r\n  }, [searchParamsQ]);\r\n\r\n  return (\r\n    <main>\r\n      <Section>\r\n        <>\r\n          <SearchForm onSubmit={handleSubmit} />\r\n          {moviesArr && <MoviesList movies={moviesArr} query={query} />}\r\n        </>\r\n      </Section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = '006535a90e42ebf59916948f18019782';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function getTrandingMovies() {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\r\n    );\r\n    const trandMovies = await response.data;\r\n\r\n    return trandMovies;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMoviesByQuery(query) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\r\n    );\r\n    const queryMovies = await response.data;\r\n\r\n    return queryMovies;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieById(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\r\n    );\r\n    const movie = await response.data;\r\n\r\n    return movie;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieActors(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\r\n    );\r\n    const actors = await response.data;\r\n\r\n    return actors;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieReviews(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\r\n    );\r\n    const reviews = await response.data;\r\n\r\n    return reviews;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n"],"names":["movie","title","id","poster_path","location","useLocation","to","className","scss","state","from","src","alt","movies","query","moviesLength","length","map","onSubmit","event","preventDefault","target","value","toLowerCase","type","name","autoFocus","placeholder","autoComplete","useState","setQuery","moviesArr","setMoviesArr","useSearchParams","searchParams","setSearchParams","searchParamsQ","get","useEffect","q","getMoviesByQuery","then","response","results","catch","error","console","log","Section","queryForm","MoviesList","API_KEY","BASE_URL","getTrandingMovies","axios","data","trandMovies","status_message","queryMovies","getMovieById","getMovieActors","actors","getMovieReviews","reviews"],"sourceRoot":""}