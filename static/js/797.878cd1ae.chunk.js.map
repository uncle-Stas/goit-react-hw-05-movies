{"version":3,"file":"static/js/797.878cd1ae.chunk.js","mappings":"gMACA,EAA4B,8BCA5B,EAAuB,wB,SCsBvB,EArBkB,SAAH,GAAmB,IAAbA,EAAK,EAALA,MACXC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,aAAcC,EAAcH,EAAdG,UAE5B,OACE,gBAAIC,UAAWC,EAAU,WACvB,wBAAKJ,IACJC,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAI,WAGN,qCAEF,wCACa,uBAAIJ,SAIvB,ECCA,EAlBmB,SAAH,GAAuB,IAAjBK,EAAS,EAATA,UACdC,EAAkBD,EAAUE,OAElC,OACE,8BACID,GAGA,eAAIL,UAAWC,EAAe,SAC3BG,EAAUG,KAAI,SAAAX,GAAK,OAClB,SAAC,EAAS,CAAgBA,MAAOA,GAAjBA,EAAMY,GAAoB,OAJ9C,0EAUR,E,2BCIA,EAlBa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,MAAK,eAA/BC,EAAI,KAAEC,EAAO,KAUpB,OARAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,GACZO,MAAK,SAAAC,GACJJ,EAAQI,EAASL,KACnB,IACCM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAM,GACtC,GAAG,CAACV,KAGF,8BAAY,OAATG,GAAgB,uCAAoB,SAAC,EAAU,CAACR,UAAWQ,KAElE,C,qLCpBMU,EAAU,mCACVC,EAAW,+BAEV,SAAeC,IAAiB,+BAWtC,8CAXM,oHAEoBC,EAAAA,EAAAA,IAAU,GAAD,OAC3BF,EAAQ,uCAA+BD,IAC1C,KAAD,EAFa,OAARL,EAAQ,gBAGYA,EAASS,KAAK,KAAD,EAAtB,OAAXC,EAAW,yBAEVA,GAAW,kCAElBP,QAAQC,IAAI,KAAMJ,SAASS,KAAKE,gBAAgB,2DAEnD,sBAEM,SAAeC,EAAiB,GAAD,+BAWrC,8CAXM,WAAgCC,GAAK,uGAEjBL,EAAAA,EAAAA,IAAU,GAAD,OAC3BF,EAAQ,iCAAyBD,EAAO,kBAAUQ,IACrD,KAAD,EAFa,OAARb,EAAQ,gBAGYA,EAASS,KAAK,KAAD,EAAtB,OAAXK,EAAW,yBAEVA,GAAW,kCAElBX,QAAQC,IAAI,KAAMJ,SAASS,KAAKE,gBAAgB,2DAEnD,sBAEM,SAAeI,EAAa,GAAD,+BAWjC,8CAXM,WAA4BxB,GAAE,uGAEViB,EAAAA,EAAAA,IAAU,GAAD,OAC3BF,EAAQ,kBAAUf,EAAE,oBAAYc,IACnC,KAAD,EAFa,OAARL,EAAQ,gBAGMA,EAASS,KAAK,KAAD,EAAtB,OAALO,EAAK,yBAEJA,GAAK,kCAEZb,QAAQC,IAAI,KAAMJ,SAASS,KAAKE,gBAAgB,2DAEnD,sBAEM,SAAeb,EAAe,GAAD,+BAWnC,8CAXM,WAA8BP,GAAE,uGAEZiB,EAAAA,EAAAA,IAAU,GAAD,OAC3BF,EAAQ,kBAAUf,EAAE,4BAAoBc,IAC3C,KAAD,EAFa,OAARL,EAAQ,gBAGOA,EAASS,KAAK,KAAD,EAAtB,OAANQ,EAAM,yBAELA,GAAM,kCAEbd,QAAQC,IAAI,KAAMJ,SAASS,KAAKE,gBAAgB,2DAEnD,sBAEM,SAAeO,EAAgB,GAAD,+BAWpC,8CAXM,WAA+B3B,GAAE,uGAEbiB,EAAAA,EAAAA,IAAU,GAAD,OAC3BF,EAAQ,kBAAUf,EAAE,4BAAoBc,IAC3C,KAAD,EAFa,OAARL,EAAQ,gBAGQA,EAASS,KAAK,KAAD,EAAtB,OAAPU,EAAO,yBAENA,GAAO,kCAEdhB,QAAQC,IAAI,KAAMJ,SAASS,KAAKE,gBAAgB,2DAEnD,sB","sources":["webpack://goit-react-hw-05-movies/./src/Components/ActorsList/ActorsList.module.scss?9383","webpack://goit-react-hw-05-movies/./src/Components/ActorsList/ActorCard/ActorCard.module.scss?4d0f","Components/ActorsList/ActorCard/ActorCard.jsx","Components/ActorsList/ActorsList.jsx","Pages/Cast/Cast.jsx","Services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"actorList\":\"ActorsList_actorList__9pgWf\"};","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"ActorCard_card__YK0e7\"};","import scss from './ActorCard.module.scss';\r\n\r\nconst ActorCard = ({ actor }) => {\r\n  const { name, profile_path, character } = actor;\r\n\r\n  return (\r\n    <li className={scss.card}>\r\n      <h4>{name}</h4>\r\n      {profile_path ? (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w200${profile_path}`}\r\n          alt=\"actor\"\r\n        />\r\n      ) : (\r\n        <p>No Photo</p>\r\n      )}\r\n      <p>\r\n        Character: <b>{character}</b>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ActorCard;\r\n","import scss from './ActorsList.module.scss';\r\n\r\nimport ActorCard from './ActorCard/ActorCard';\r\n\r\nconst ActorsList = ({ actorsArr }) => {\r\n  const actorsArrLength = actorsArr.length;\r\n\r\n  return (\r\n    <>\r\n      {!actorsArrLength ? (\r\n        <p>Sorry, We don't have information about actors</p>\r\n      ) : (\r\n        <ul className={scss.actorList}>\r\n          {actorsArr.map(actor => (\r\n            <ActorCard key={actor.id} actor={actor} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ActorsList;\r\n","import ActorsList from 'Components/ActorsList/ActorsList';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getMovieActors } from 'Services/movieApi';\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const [cast, setCast] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getMovieActors(movieId)\r\n      .then(response => {\r\n        setCast(response.cast);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>{cast === null ? <p>Loading...</p> : <ActorsList actorsArr={cast} />}</>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = '006535a90e42ebf59916948f18019782';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function getTrandingMovies() {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\r\n    );\r\n    const trandMovies = await response.data;\r\n\r\n    return trandMovies;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMoviesByQuery(query) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\r\n    );\r\n    const queryMovies = await response.data;\r\n\r\n    return queryMovies;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieById(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\r\n    );\r\n    const movie = await response.data;\r\n\r\n    return movie;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieActors(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\r\n    );\r\n    const actors = await response.data;\r\n\r\n    return actors;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n\r\nexport async function getMovieReviews(id) {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\r\n    );\r\n    const reviews = await response.data;\r\n\r\n    return reviews;\r\n  } catch (error) {\r\n    console.log(error.response.data.status_message);\r\n  }\r\n}\r\n"],"names":["actor","name","profile_path","character","className","scss","src","alt","actorsArr","actorsArrLength","length","map","id","movieId","useParams","useState","cast","setCast","useEffect","getMovieActors","then","response","catch","error","console","log","API_KEY","BASE_URL","getTrandingMovies","axios","data","trandMovies","status_message","getMoviesByQuery","query","queryMovies","getMovieById","movie","actors","getMovieReviews","reviews"],"sourceRoot":""}